name: 'Determine deployment environment'
description: 'determine deployment environment name based on branch'

inputs:
  feature-branch-env-name:
    description: 'Name of the deployment environment for feature branches - default is `uat`'
    required: false
    default: 'uat'
  develop-branch-env-name:
    description: 'Name of the deployment environment for develop branches - default is `qa`'
    required: false
    default: 'qa'
  master-branch-env-name:
    description: 'Name of the deployment environment for master/main branches - default is `staging`'
    required: false
    default: 'staging'
  tag-env-name:
    description: 'Name of the deployment environment for tags/releases - default is `production`'
    required: false
    default: 'production'

outputs:
  env_name:
    description: "Name of environment"
    value: ${{ steps.branch_check.outputs.env_name }}

runs:
  using: "composite"
  steps:
    - name: Set deployment environment
      id: branch_check
      shell: bash
      run: |        
        echo "ref=${{ github.ref }}"
        echo "ref_name=${{ github.ref_name }}"        
        if [[ ${{ github.ref_name }} == "feature/"* ]]; then
          echo "Check if feature branch"
          echo "env should be ${{ inputs.feature-branch-env-name }}"
          env_name="${{ inputs.feature-branch-env-name }}"      
        elif [[ ${{ github.ref_name }} == "develop" }} ]]; then
          echo "Check if develop branch"
          echo "env should be ${{ inputs.develop-branch-env-name }}"
          env_name="${{ inputs.develop-branch-env-name }}"       
        elif [[ ${{ github.ref_name }} == 'master' || ${{ github.ref_name }} == 'main' ]]; then
          echo "Check if master/main branch"
          echo "env should be ${{ inputs.master-branch-env-name }}"
          env_name="${{ inputs.master-branch-env-name }}"
        elif [[ ${{ contains(github.ref, 'refs/tags') }}  ]]; then
          echo "Check if tag"
          echo "env should be ${{ inputs.tag-env-name }}"
          env_name="${{ inputs.tag-env-name }}"
        fi
          echo "env_name=${env_name}" >> $GITHUB_OUTPUT
          echo "environment=${env_name}"