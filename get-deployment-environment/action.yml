name: 'Determine deployment environment'
description: 'determine deployment environment name based on branch'

inputs:
  feature-branch-env-name:
    description: 'Name of the deployment environment for feature branches - default is `uat`'
    required: false
    default: 'uat'
  develop-branch-env-name:
    description: 'Name of the deployment environment for develop branches - default is `qa`'
    required: false
    default: 'qa'
  master-branch-env-name:
    description: 'Name of the deployment environment for master/main branches - default is `staging`'
    required: false
    default: 'staging'
  tag-env-name:
    description: 'Name of the deployment environment for tags/releases - default is `production`'
    required: false
    default: 'production'

outputs:
  env_name:
    description: "Name of environment"
    value: ${{ steps.branch_check.outputs.env_name }}

runs:
  using: "composite"
  steps:
    - name: Set deployment environment
      id: branch_check
      shell: bash
      run: |
        if [[ "${GITHUB_HEAD_REF}" != "" ]]; then
          branchName=$(echo ${{ github.ref_name }})
          isPullRequest=true
        else
          branchName=$(echo ${GITHUB_REF#refs/heads/})
          isPullRequest=false
        fi
        echo "ref= ${{ github.ref }}"
        echo "ref_name= ${{ github.ref_name }}"

        echo "Check if feature branch"
        if [[ ${{ startsWith( github.ref, 'feature/' ) }} ]]; then
          env_name="${{ inputs.feature-branch-env-name }}"
        echo "Check if develop branch"
        elif [[ ${{ github.ref_name == 'develop' }} ]]; then
          env_name="${{ inputs.develop-branch-env-name }}"
        echo "Check if master/main branch"  
        elif [[ ${{ github.ref_name == 'master' || github.ref_name == 'main' }} ]]; then
          env_name="${{ inputs.master-branch-env-name }}"
        echo "Check if tag" 
        elif [[ ${{ contains(github.ref, 'refs/tags') }} ]]; then
          env_name="${{ inputs.tag-env-name }}"
        fi
          echo "env_name=${env_name}" >> $GITHUB_OUTPUT
          echo "environment=${env_name}"